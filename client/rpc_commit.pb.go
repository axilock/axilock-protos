// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: client/rpc_commit.proto

package clientpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendCommitDataRequest struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Metadata      string                                 `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	RepoUrl       string                                 `protobuf:"bytes,3,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`
	Commits       []*SendCommitDataRequest_CommitObjects `protobuf:"bytes,4,rep,name=commits,proto3" json:"commits,omitempty"`
	PushTime      *timestamppb.Timestamp                 `protobuf:"bytes,5,opt,name=push_time,json=pushTime,proto3" json:"push_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendCommitDataRequest) Reset() {
	*x = SendCommitDataRequest{}
	mi := &file_client_rpc_commit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCommitDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCommitDataRequest) ProtoMessage() {}

func (x *SendCommitDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_rpc_commit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCommitDataRequest.ProtoReflect.Descriptor instead.
func (*SendCommitDataRequest) Descriptor() ([]byte, []int) {
	return file_client_rpc_commit_proto_rawDescGZIP(), []int{0}
}

func (x *SendCommitDataRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *SendCommitDataRequest) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *SendCommitDataRequest) GetCommits() []*SendCommitDataRequest_CommitObjects {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *SendCommitDataRequest) GetPushTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PushTime
	}
	return nil
}

type SendCommitDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendCommitDataResponse) Reset() {
	*x = SendCommitDataResponse{}
	mi := &file_client_rpc_commit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCommitDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCommitDataResponse) ProtoMessage() {}

func (x *SendCommitDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_rpc_commit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCommitDataResponse.ProtoReflect.Descriptor instead.
func (*SendCommitDataResponse) Descriptor() ([]byte, []int) {
	return file_client_rpc_commit_proto_rawDescGZIP(), []int{1}
}

func (x *SendCommitDataResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *SendCommitDataResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type SendCommitDataRequest_CommitObjects struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommitId      string                 `protobuf:"bytes,1,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	CommitAuthor  string                 `protobuf:"bytes,2,opt,name=commit_author,json=commitAuthor,proto3" json:"commit_author,omitempty"`
	CommitTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=commit_time,json=commitTime,proto3" json:"commit_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendCommitDataRequest_CommitObjects) Reset() {
	*x = SendCommitDataRequest_CommitObjects{}
	mi := &file_client_rpc_commit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCommitDataRequest_CommitObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCommitDataRequest_CommitObjects) ProtoMessage() {}

func (x *SendCommitDataRequest_CommitObjects) ProtoReflect() protoreflect.Message {
	mi := &file_client_rpc_commit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCommitDataRequest_CommitObjects.ProtoReflect.Descriptor instead.
func (*SendCommitDataRequest_CommitObjects) Descriptor() ([]byte, []int) {
	return file_client_rpc_commit_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SendCommitDataRequest_CommitObjects) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *SendCommitDataRequest_CommitObjects) GetCommitAuthor() string {
	if x != nil {
		return x.CommitAuthor
	}
	return ""
}

func (x *SendCommitDataRequest_CommitObjects) GetCommitTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CommitTime
	}
	return nil
}

var File_client_rpc_commit_proto protoreflect.FileDescriptor

const file_client_rpc_commit_proto_rawDesc = "" +
	"\n" +
	"\x17client/rpc_commit.proto\x12\x06client\x1a\x1fgoogle/protobuf/timestamp.proto\"\xdf\x02\n" +
	"\x15SendCommitDataRequest\x12\x1a\n" +
	"\bmetadata\x18\x01 \x01(\tR\bmetadata\x12\x19\n" +
	"\brepo_url\x18\x03 \x01(\tR\arepoUrl\x12E\n" +
	"\acommits\x18\x04 \x03(\v2+.client.SendCommitDataRequest.CommitObjectsR\acommits\x127\n" +
	"\tpush_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\bpushTime\x1a\x8e\x01\n" +
	"\rCommitObjects\x12\x1b\n" +
	"\tcommit_id\x18\x01 \x01(\tR\bcommitId\x12#\n" +
	"\rcommit_author\x18\x02 \x01(\tR\fcommitAuthor\x12;\n" +
	"\vcommit_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"commitTime\"k\n" +
	"\x16SendCommitDataResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\bR\x06status\x129\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt2f\n" +
	"\x11CommitDataService\x12Q\n" +
	"\x0eSendCommitData\x12\x1d.client.SendCommitDataRequest\x1a\x1e.client.SendCommitDataResponse\"\x00B\x19Z\x17axilock-runner/clientpbb\x06proto3"

var (
	file_client_rpc_commit_proto_rawDescOnce sync.Once
	file_client_rpc_commit_proto_rawDescData []byte
)

func file_client_rpc_commit_proto_rawDescGZIP() []byte {
	file_client_rpc_commit_proto_rawDescOnce.Do(func() {
		file_client_rpc_commit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_client_rpc_commit_proto_rawDesc), len(file_client_rpc_commit_proto_rawDesc)))
	})
	return file_client_rpc_commit_proto_rawDescData
}

var file_client_rpc_commit_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_client_rpc_commit_proto_goTypes = []any{
	(*SendCommitDataRequest)(nil),               // 0: client.SendCommitDataRequest
	(*SendCommitDataResponse)(nil),              // 1: client.SendCommitDataResponse
	(*SendCommitDataRequest_CommitObjects)(nil), // 2: client.SendCommitDataRequest.CommitObjects
	(*timestamppb.Timestamp)(nil),               // 3: google.protobuf.Timestamp
}
var file_client_rpc_commit_proto_depIdxs = []int32{
	2, // 0: client.SendCommitDataRequest.commits:type_name -> client.SendCommitDataRequest.CommitObjects
	3, // 1: client.SendCommitDataRequest.push_time:type_name -> google.protobuf.Timestamp
	3, // 2: client.SendCommitDataResponse.created_at:type_name -> google.protobuf.Timestamp
	3, // 3: client.SendCommitDataRequest.CommitObjects.commit_time:type_name -> google.protobuf.Timestamp
	0, // 4: client.CommitDataService.SendCommitData:input_type -> client.SendCommitDataRequest
	1, // 5: client.CommitDataService.SendCommitData:output_type -> client.SendCommitDataResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_client_rpc_commit_proto_init() }
func file_client_rpc_commit_proto_init() {
	if File_client_rpc_commit_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_client_rpc_commit_proto_rawDesc), len(file_client_rpc_commit_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_client_rpc_commit_proto_goTypes,
		DependencyIndexes: file_client_rpc_commit_proto_depIdxs,
		MessageInfos:      file_client_rpc_commit_proto_msgTypes,
	}.Build()
	File_client_rpc_commit_proto = out.File
	file_client_rpc_commit_proto_goTypes = nil
	file_client_rpc_commit_proto_depIdxs = nil
}
