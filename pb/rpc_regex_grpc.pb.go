// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: rpc_regex.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegexService_CreateRegex_FullMethodName = "/pb.RegexService/CreateRegex"
	RegexService_SyncRegex_FullMethodName   = "/pb.RegexService/SyncRegex"
)

// RegexServiceClient is the client API for RegexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegexServiceClient interface {
	CreateRegex(ctx context.Context, in *CreateRegexRequest, opts ...grpc.CallOption) (*CreateRegexResponse, error)
	SyncRegex(ctx context.Context, in *SyncRegexDataRequest, opts ...grpc.CallOption) (*SyncRegexDataResponse, error)
}

type regexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegexServiceClient(cc grpc.ClientConnInterface) RegexServiceClient {
	return &regexServiceClient{cc}
}

func (c *regexServiceClient) CreateRegex(ctx context.Context, in *CreateRegexRequest, opts ...grpc.CallOption) (*CreateRegexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRegexResponse)
	err := c.cc.Invoke(ctx, RegexService_CreateRegex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regexServiceClient) SyncRegex(ctx context.Context, in *SyncRegexDataRequest, opts ...grpc.CallOption) (*SyncRegexDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncRegexDataResponse)
	err := c.cc.Invoke(ctx, RegexService_SyncRegex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegexServiceServer is the server API for RegexService service.
// All implementations must embed UnimplementedRegexServiceServer
// for forward compatibility.
type RegexServiceServer interface {
	CreateRegex(context.Context, *CreateRegexRequest) (*CreateRegexResponse, error)
	SyncRegex(context.Context, *SyncRegexDataRequest) (*SyncRegexDataResponse, error)
	mustEmbedUnimplementedRegexServiceServer()
}

// UnimplementedRegexServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegexServiceServer struct{}

func (UnimplementedRegexServiceServer) CreateRegex(context.Context, *CreateRegexRequest) (*CreateRegexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegex not implemented")
}
func (UnimplementedRegexServiceServer) SyncRegex(context.Context, *SyncRegexDataRequest) (*SyncRegexDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRegex not implemented")
}
func (UnimplementedRegexServiceServer) mustEmbedUnimplementedRegexServiceServer() {}
func (UnimplementedRegexServiceServer) testEmbeddedByValue()                      {}

// UnsafeRegexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegexServiceServer will
// result in compilation errors.
type UnsafeRegexServiceServer interface {
	mustEmbedUnimplementedRegexServiceServer()
}

func RegisterRegexServiceServer(s grpc.ServiceRegistrar, srv RegexServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegexServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegexService_ServiceDesc, srv)
}

func _RegexService_CreateRegex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegexServiceServer).CreateRegex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegexService_CreateRegex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegexServiceServer).CreateRegex(ctx, req.(*CreateRegexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegexService_SyncRegex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRegexDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegexServiceServer).SyncRegex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegexService_SyncRegex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegexServiceServer).SyncRegex(ctx, req.(*SyncRegexDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegexService_ServiceDesc is the grpc.ServiceDesc for RegexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RegexService",
	HandlerType: (*RegexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegex",
			Handler:    _RegexService_CreateRegex_Handler,
		},
		{
			MethodName: "SyncRegex",
			Handler:    _RegexService_SyncRegex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_regex.proto",
}
