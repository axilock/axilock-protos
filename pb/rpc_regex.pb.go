// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: rpc_regex.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncRegexDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastSynced    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_synced,json=lastSynced,proto3" json:"last_synced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncRegexDataRequest) Reset() {
	*x = SyncRegexDataRequest{}
	mi := &file_rpc_regex_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncRegexDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRegexDataRequest) ProtoMessage() {}

func (x *SyncRegexDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_regex_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRegexDataRequest.ProtoReflect.Descriptor instead.
func (*SyncRegexDataRequest) Descriptor() ([]byte, []int) {
	return file_rpc_regex_proto_rawDescGZIP(), []int{0}
}

func (x *SyncRegexDataRequest) GetLastSynced() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSynced
	}
	return nil
}

type SyncRegexDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsChanged     bool                   `protobuf:"varint,1,opt,name=is_changed,json=isChanged,proto3" json:"is_changed,omitempty"`
	Items         []*RegexData           `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncRegexDataResponse) Reset() {
	*x = SyncRegexDataResponse{}
	mi := &file_rpc_regex_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncRegexDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRegexDataResponse) ProtoMessage() {}

func (x *SyncRegexDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_regex_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRegexDataResponse.ProtoReflect.Descriptor instead.
func (*SyncRegexDataResponse) Descriptor() ([]byte, []int) {
	return file_rpc_regex_proto_rawDescGZIP(), []int{1}
}

func (x *SyncRegexDataResponse) GetIsChanged() bool {
	if x != nil {
		return x.IsChanged
	}
	return false
}

func (x *SyncRegexDataResponse) GetItems() []*RegexData {
	if x != nil {
		return x.Items
	}
	return nil
}

type RegexData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Desc          string                 `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	RegexStr      string                 `protobuf:"bytes,2,opt,name=regex_str,json=regexStr,proto3" json:"regex_str,omitempty"`
	Version       int32                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegexData) Reset() {
	*x = RegexData{}
	mi := &file_rpc_regex_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegexData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexData) ProtoMessage() {}

func (x *RegexData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_regex_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexData.ProtoReflect.Descriptor instead.
func (*RegexData) Descriptor() ([]byte, []int) {
	return file_rpc_regex_proto_rawDescGZIP(), []int{2}
}

func (x *RegexData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *RegexData) GetRegexStr() string {
	if x != nil {
		return x.RegexStr
	}
	return ""
}

func (x *RegexData) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type CreateRegexRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	RegexStr      string                 `protobuf:"bytes,2,opt,name=regex_str,json=regexStr,proto3" json:"regex_str,omitempty"`
	Desc          string                 `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRegexRequest) Reset() {
	*x = CreateRegexRequest{}
	mi := &file_rpc_regex_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRegexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegexRequest) ProtoMessage() {}

func (x *CreateRegexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_regex_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegexRequest.ProtoReflect.Descriptor instead.
func (*CreateRegexRequest) Descriptor() ([]byte, []int) {
	return file_rpc_regex_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRegexRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateRegexRequest) GetRegexStr() string {
	if x != nil {
		return x.RegexStr
	}
	return ""
}

func (x *CreateRegexRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type CreateRegexResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRegexResponse) Reset() {
	*x = CreateRegexResponse{}
	mi := &file_rpc_regex_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRegexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegexResponse) ProtoMessage() {}

func (x *CreateRegexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_regex_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegexResponse.ProtoReflect.Descriptor instead.
func (*CreateRegexResponse) Descriptor() ([]byte, []int) {
	return file_rpc_regex_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRegexResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateRegexResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_rpc_regex_proto protoreflect.FileDescriptor

var file_rpc_regex_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x15, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x67, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x56, 0x0a, 0x09, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x59, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x53, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x6a, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0x90, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67, 0x65, 0x78, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x14, 0x5a, 0x12, 0x61, 0x78,
	0x69, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_regex_proto_rawDescOnce sync.Once
	file_rpc_regex_proto_rawDescData = file_rpc_regex_proto_rawDesc
)

func file_rpc_regex_proto_rawDescGZIP() []byte {
	file_rpc_regex_proto_rawDescOnce.Do(func() {
		file_rpc_regex_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_regex_proto_rawDescData)
	})
	return file_rpc_regex_proto_rawDescData
}

var file_rpc_regex_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_rpc_regex_proto_goTypes = []any{
	(*SyncRegexDataRequest)(nil),  // 0: pb.SyncRegexDataRequest
	(*SyncRegexDataResponse)(nil), // 1: pb.SyncRegexDataResponse
	(*RegexData)(nil),             // 2: pb.RegexData
	(*CreateRegexRequest)(nil),    // 3: pb.CreateRegexRequest
	(*CreateRegexResponse)(nil),   // 4: pb.CreateRegexResponse
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_rpc_regex_proto_depIdxs = []int32{
	5, // 0: pb.SyncRegexDataRequest.last_synced:type_name -> google.protobuf.Timestamp
	2, // 1: pb.SyncRegexDataResponse.items:type_name -> pb.RegexData
	5, // 2: pb.CreateRegexResponse.created_at:type_name -> google.protobuf.Timestamp
	3, // 3: pb.RegexService.CreateRegex:input_type -> pb.CreateRegexRequest
	0, // 4: pb.RegexService.SyncRegex:input_type -> pb.SyncRegexDataRequest
	4, // 5: pb.RegexService.CreateRegex:output_type -> pb.CreateRegexResponse
	1, // 6: pb.RegexService.SyncRegex:output_type -> pb.SyncRegexDataResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_rpc_regex_proto_init() }
func file_rpc_regex_proto_init() {
	if File_rpc_regex_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_regex_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_regex_proto_goTypes,
		DependencyIndexes: file_rpc_regex_proto_depIdxs,
		MessageInfos:      file_rpc_regex_proto_msgTypes,
	}.Build()
	File_rpc_regex_proto = out.File
	file_rpc_regex_proto_rawDesc = nil
	file_rpc_regex_proto_goTypes = nil
	file_rpc_regex_proto_depIdxs = nil
}
